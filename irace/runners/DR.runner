#!/bin/bash
###############################################################################
# This script is the command that is executed every run.
# Check the examples in examples/
#
# This script is run in the execution directory (execDir, --exec-dir).
#
# PARAMETERS:
# $1 is the candidate configuration number
# $2 is the instance ID
# $3 is the seed
# $4 is the instance name
# The rest ($* after `shift 4') are parameters to the run
#
# RETURN VALUE:
# This script should print one numerical value: the cost that must be minimized.
# Exit with 0 if no error, with 1 in case of error
###############################################################################
error() {
    echo "`TZ=UTC date`: $0: error: $@"
    exit 1
}

START_TIME=$(date +%s.%N)

CREDIT="DR"
FIXED_PARAMS="-C $CREDIT"
LOG_DIR="logs/$CREDIT"

EXE=$HOME/auto-DE/tuning

CONFIG_ID=$1
INSTANCE_ID=$2
SEED=$3
INSTANCE=$4
shift 4 || error "Not enough parameters"
CONFIG_PARAMS=$*

STDOUT=${LOG_DIR}/c${CONFIG_ID}-${INSTANCE_ID}-${SEED}.stdout
STDERR=${LOG_DIR}/c${CONFIG_ID}-${INSTANCE_ID}-${SEED}.stderr

if [ ! -x "${EXE}" ]; then
    error "${EXE}: not found or not executable (pwd: $(pwd))"
fi

$EXE ${FIXED_PARAMS} ${INSTANCE} ${CONFIG_PARAMS} -S ${SEED} 1> ${STDOUT} 2> ${STDERR}

# # This may be used to introduce a delay if there are filesystem
# # issues.
SLEEPTIME=1
while [ ! -s "${STDOUT}" ]; do
 sleep $SLEEPTIME
 let "SLEEPTIME += 1"
done

# This is an example of reading a number from the output.
# It assumes that the objective value is the first number in
# the first column of the last line of the output.
END_TIME=$(date +%s.%N)
DIFF_TIME=$(echo "$END_TIME - $START_TIME" | bc)

if [ -s "${STDOUT}" ]; then
    COST=$(tail -n 1 ${STDOUT})
    echo "$COST"
    rm "${STDOUT}" "${STDERR}"
    exit 0
else
    error "${STDOUT}: No such file or directory"
fi
